# Name
NAME = SST_EPU60_Spectrum

# gap value
#GAP = 5.5
#MODE = AntiParallelTIBO
#PHASE = 12.5
#

# This is the NAME used in output files.  You MUST specify this
OUTNAME = $(NAME)_$(Cluster).$(Process).tgz

# The UNIVERSE defines an execution environment. You will almost always use VANILLA.
Universe = vanilla

# Input and output files
transfer_input_files = SST_EPU60_osg.tgz
transfer_output_files = $(OUTNAME)
ShouldTransferFiles = YES
when_to_transfer_output = ON_EXIT

# These are good base requirements for your jobs on OSG. It is specific on OS and
# OS version, core cound and memory, and wants to use the software modules. 
Requirements = (OSGVO_OS_STRING == "RHEL 6") && Arch == "X86_64" &&  HAS_MODULES == True && HAS_NUMPY == True
request_cpus = 1
request_memory = 1 GB

# EXECUTABLE is the program your job will run It's often useful
# to create a shell script to "wrap" your actual work.
Executable = NSLSII-OSCARS-OSG/SST/EPU60/osg_run_Spectrum.sh
Arguments = $(NAME) $(GAP) $(MODE) $(PHASE) $(Cluster) $(Process)

# ERROR and OUTPUT are the error and output channels from your job
# that HTCondor returns from the remote host.
Error  = job.$(NAME)_$(Cluster).$(Process).error
Output = job.$(NAME)_$(Cluster).$(Process).output

# The LOG file is where HTCondor places information about your
# job's status, success, and resource consumption.
Log = job.$(NAME)_$(Cluster).log

# Send the job to Held state on failure. 
on_exit_hold = (ExitBySignal == True) || (ExitCode != 0)

# Periodically retry the jobs every 1 hour, up to a maximum of 5 retries.
periodic_release =  (NumJobStarts < 5) && ((CurrentTime - EnteredCurrentStatus) > 60*60)

# Add project name
+ProjectName="NSLS2ID"

# QUEUE is the "start button" - it launches any jobs that have been
# specified thus far.
Queue 2
